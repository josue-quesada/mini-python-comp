//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Josue/Documents/GitHub/mini-python-comp/mini-python/UI/src/MPLexer.g4 by ANTLR 4.13.1

// Unreachable code detected

using UI.Imports;

#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace generated {
	using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using static UI.Imports.DenterHelper;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MPLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, NEWLINE=3, DEF=4, RETURN=5, IF=6, ELSE=7, WHILE=8, 
		FOR=9, IN=10, PRINT=11, LEN=12, PLUS=13, MINUS=14, MUL=15, DIV=16, ASSIGN=17, 
		LT=18, GT=19, LE=20, GE=21, EQ=22, LP=23, RP=24, LB=25, RB=26, COLON=27, 
		COMMA=28, INTEGER=29, FLOAT=30, CHAR=31, STRING=32, IDENTIFIER=33, COMMENT=34, 
		MULTILINE_COMMENT=35, WS=36;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"NEWLINE", "DEF", "RETURN", "IF", "ELSE", "WHILE", "FOR", "IN", "PRINT", 
		"LEN", "PLUS", "MINUS", "MUL", "DIV", "ASSIGN", "LT", "GT", "LE", "GE", 
		"EQ", "LP", "RP", "LB", "RB", "COLON", "COMMA", "INTEGER", "FLOAT", "CHAR", 
		"STRING", "IDENTIFIER", "COMMENT", "MULTILINE_COMMENT", "WS"
	};


	private DenterHelper denter;
	  
	public override IToken NextToken()
	{
	    if (denter == null)
	    {
	        denter = DenterHelper.Builder()
	            .Nl(NEWLINE)
	            .Indent(MPParser.INDENT)
	            .Dedent(MPParser.DEDENT)
	            .PullToken(base.NextToken);
	        Console.WriteLine("DenterHelper initialized");
	    }
	    Console.WriteLine($"Token emitted: {denter.NextToken().Text}, Type: {denter.NextToken().Type}");
	    return denter.NextToken();
	}


	public MPLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MPLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'def'", "'return'", "'if'", "'else'", "'while'", 
		"'for'", "'in'", "'print'", "'len'", "'+'", "'-'", "'*'", "'/'", "'='", 
		"'<'", "'>'", "'<='", "'>='", "'=='", "'('", "')'", "'['", "']'", "':'", 
		"','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "NEWLINE", "DEF", "RETURN", "IF", "ELSE", "WHILE", 
		"FOR", "IN", "PRINT", "LEN", "PLUS", "MINUS", "MUL", "DIV", "ASSIGN", 
		"LT", "GT", "LE", "GE", "EQ", "LP", "RP", "LB", "RB", "COLON", "COMMA", 
		"INTEGER", "FLOAT", "CHAR", "STRING", "IDENTIFIER", "COMMENT", "MULTILINE_COMMENT", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MPLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MPLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,36,234,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,1,0,3,0,71,8,0,
		1,0,1,0,1,0,5,0,76,8,0,10,0,12,0,79,9,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,
		1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,
		10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,
		17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,
		22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,4,26,159,8,26,11,26,12,26,160,1,
		27,4,27,164,8,27,11,27,12,27,165,1,27,1,27,4,27,170,8,27,11,27,12,27,171,
		1,28,1,28,1,28,1,28,1,29,1,29,5,29,180,8,29,10,29,12,29,183,9,29,1,29,
		1,29,1,29,5,29,188,8,29,10,29,12,29,191,9,29,1,29,3,29,194,8,29,1,30,1,
		30,5,30,198,8,30,10,30,12,30,201,9,30,1,31,1,31,5,31,205,8,31,10,31,12,
		31,208,9,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,5,32,217,8,32,10,32,12,
		32,220,9,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,4,33,229,8,33,11,33,12,
		33,230,1,33,1,33,3,181,189,218,0,34,1,3,3,4,5,5,7,6,9,7,11,8,13,9,15,10,
		17,11,19,12,21,13,23,14,25,15,27,16,29,17,31,18,33,19,35,20,37,21,39,22,
		41,23,43,24,45,25,47,26,49,27,51,28,53,29,55,30,57,31,59,32,61,33,63,34,
		65,35,67,36,1,0,5,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
		95,97,122,2,0,10,10,13,13,2,0,9,9,32,32,245,0,1,1,0,0,0,0,3,1,0,0,0,0,
		5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
		0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
		1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
		0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
		1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
		0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,1,70,1,0,0,0,3,80,
		1,0,0,0,5,84,1,0,0,0,7,91,1,0,0,0,9,94,1,0,0,0,11,99,1,0,0,0,13,105,1,
		0,0,0,15,109,1,0,0,0,17,112,1,0,0,0,19,118,1,0,0,0,21,122,1,0,0,0,23,124,
		1,0,0,0,25,126,1,0,0,0,27,128,1,0,0,0,29,130,1,0,0,0,31,132,1,0,0,0,33,
		134,1,0,0,0,35,136,1,0,0,0,37,139,1,0,0,0,39,142,1,0,0,0,41,145,1,0,0,
		0,43,147,1,0,0,0,45,149,1,0,0,0,47,151,1,0,0,0,49,153,1,0,0,0,51,155,1,
		0,0,0,53,158,1,0,0,0,55,163,1,0,0,0,57,173,1,0,0,0,59,193,1,0,0,0,61,195,
		1,0,0,0,63,202,1,0,0,0,65,211,1,0,0,0,67,228,1,0,0,0,69,71,5,13,0,0,70,
		69,1,0,0,0,70,71,1,0,0,0,71,72,1,0,0,0,72,77,5,10,0,0,73,74,5,32,0,0,74,
		76,5,32,0,0,75,73,1,0,0,0,76,79,1,0,0,0,77,75,1,0,0,0,77,78,1,0,0,0,78,
		2,1,0,0,0,79,77,1,0,0,0,80,81,5,100,0,0,81,82,5,101,0,0,82,83,5,102,0,
		0,83,4,1,0,0,0,84,85,5,114,0,0,85,86,5,101,0,0,86,87,5,116,0,0,87,88,5,
		117,0,0,88,89,5,114,0,0,89,90,5,110,0,0,90,6,1,0,0,0,91,92,5,105,0,0,92,
		93,5,102,0,0,93,8,1,0,0,0,94,95,5,101,0,0,95,96,5,108,0,0,96,97,5,115,
		0,0,97,98,5,101,0,0,98,10,1,0,0,0,99,100,5,119,0,0,100,101,5,104,0,0,101,
		102,5,105,0,0,102,103,5,108,0,0,103,104,5,101,0,0,104,12,1,0,0,0,105,106,
		5,102,0,0,106,107,5,111,0,0,107,108,5,114,0,0,108,14,1,0,0,0,109,110,5,
		105,0,0,110,111,5,110,0,0,111,16,1,0,0,0,112,113,5,112,0,0,113,114,5,114,
		0,0,114,115,5,105,0,0,115,116,5,110,0,0,116,117,5,116,0,0,117,18,1,0,0,
		0,118,119,5,108,0,0,119,120,5,101,0,0,120,121,5,110,0,0,121,20,1,0,0,0,
		122,123,5,43,0,0,123,22,1,0,0,0,124,125,5,45,0,0,125,24,1,0,0,0,126,127,
		5,42,0,0,127,26,1,0,0,0,128,129,5,47,0,0,129,28,1,0,0,0,130,131,5,61,0,
		0,131,30,1,0,0,0,132,133,5,60,0,0,133,32,1,0,0,0,134,135,5,62,0,0,135,
		34,1,0,0,0,136,137,5,60,0,0,137,138,5,61,0,0,138,36,1,0,0,0,139,140,5,
		62,0,0,140,141,5,61,0,0,141,38,1,0,0,0,142,143,5,61,0,0,143,144,5,61,0,
		0,144,40,1,0,0,0,145,146,5,40,0,0,146,42,1,0,0,0,147,148,5,41,0,0,148,
		44,1,0,0,0,149,150,5,91,0,0,150,46,1,0,0,0,151,152,5,93,0,0,152,48,1,0,
		0,0,153,154,5,58,0,0,154,50,1,0,0,0,155,156,5,44,0,0,156,52,1,0,0,0,157,
		159,7,0,0,0,158,157,1,0,0,0,159,160,1,0,0,0,160,158,1,0,0,0,160,161,1,
		0,0,0,161,54,1,0,0,0,162,164,7,0,0,0,163,162,1,0,0,0,164,165,1,0,0,0,165,
		163,1,0,0,0,165,166,1,0,0,0,166,167,1,0,0,0,167,169,5,46,0,0,168,170,7,
		0,0,0,169,168,1,0,0,0,170,171,1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,
		172,56,1,0,0,0,173,174,5,39,0,0,174,175,9,0,0,0,175,176,5,39,0,0,176,58,
		1,0,0,0,177,181,5,34,0,0,178,180,9,0,0,0,179,178,1,0,0,0,180,183,1,0,0,
		0,181,182,1,0,0,0,181,179,1,0,0,0,182,184,1,0,0,0,183,181,1,0,0,0,184,
		194,5,34,0,0,185,189,5,39,0,0,186,188,9,0,0,0,187,186,1,0,0,0,188,191,
		1,0,0,0,189,190,1,0,0,0,189,187,1,0,0,0,190,192,1,0,0,0,191,189,1,0,0,
		0,192,194,5,39,0,0,193,177,1,0,0,0,193,185,1,0,0,0,194,60,1,0,0,0,195,
		199,7,1,0,0,196,198,7,2,0,0,197,196,1,0,0,0,198,201,1,0,0,0,199,197,1,
		0,0,0,199,200,1,0,0,0,200,62,1,0,0,0,201,199,1,0,0,0,202,206,5,35,0,0,
		203,205,8,3,0,0,204,203,1,0,0,0,205,208,1,0,0,0,206,204,1,0,0,0,206,207,
		1,0,0,0,207,209,1,0,0,0,208,206,1,0,0,0,209,210,6,31,0,0,210,64,1,0,0,
		0,211,212,5,34,0,0,212,213,5,34,0,0,213,214,5,34,0,0,214,218,1,0,0,0,215,
		217,9,0,0,0,216,215,1,0,0,0,217,220,1,0,0,0,218,219,1,0,0,0,218,216,1,
		0,0,0,219,221,1,0,0,0,220,218,1,0,0,0,221,222,5,34,0,0,222,223,5,34,0,
		0,223,224,5,34,0,0,224,225,1,0,0,0,225,226,6,32,0,0,226,66,1,0,0,0,227,
		229,7,4,0,0,228,227,1,0,0,0,229,230,1,0,0,0,230,228,1,0,0,0,230,231,1,
		0,0,0,231,232,1,0,0,0,232,233,6,33,0,0,233,68,1,0,0,0,13,0,70,77,160,165,
		171,181,189,193,199,206,218,230,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace generated
